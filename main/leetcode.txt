

双指针：常见于数组和字符串相关的问题中，例如快慢指针、左右指针等。

贪心算法：通常用于求解最优解的问题，每一步都选择当前最优的解决方案，从而希望得到全局最优解。

回溯算法：一种搜索算法，通常用于解决组合、排列、子集等问题，通过尝试所有可能的候选解来找到所有解。

递归：在解决树、图等问题时经常用到，利用函数的递归调用实现对数据的深度优先搜索。

动态规划：用于解决最优化问题，将问题分解为子问题并保存中间结果，避免重复计算。

深度优先搜索（DFS）：一种图遍历算法，通过深度优先的方式遍历图中的节点。

广度优先搜索（BFS）：一种图遍历算法，通过广度优先的方式遍历图中的节点。

并查集：一种用于处理集合的数据结构，通常用于解决连通性、集合合并等问题。

拓扑排序：一种图算法，用于对有向无环图进行排序，通常用于解决依赖关系、任务调度等问题。

最短路径算法：例如 Dijkstra 算法、Floyd-Warshall 算法等，用于求解图中两个节点之间的最短路径。

马拉车算法 :马拉车算法的核心在于利用回文串的对称性质来避免重复计算。该算法可以在线性时间内找到每个位置为中心的最长回文串的长度。